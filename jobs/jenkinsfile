pipeline {
    agent any

    parameters {
        string(name: 'name_container', defaultValue: 'felipemoralescybertrust', description: 'nombre del docker')
        string(name: 'name_imagen_front', defaultValue: 'practicafrontct', description: 'nombre de la imagen del front')
        string(name: 'tag_imagen', defaultValue: 'latest', description: 'etiqueta de la imagen')
        string(name: 'name_imagen_back', defaultValue: 'practicabackct',description: 'nombre de la imagen del back')
    }

    environment {
        name_final_front = "${name_container}/${name_imagen_front}:${tag_imagen}"
        name_final_back = "${name_container}/${name_imagen_back}:${tag_imagen}"
    }

    stages {
        //Etapa para eliminar contenedores e imagenes
        //Eliminar contenedores para que los cambios se generen en el despliegue
        //Eliminar imagenes para que no se creen duplicados.
        stage("Eliminar todos los contenedores"){
            steps{
                script{
                    //Eliminando contenedor frontend
                    sh "docker stop ${name_imagen_front} || (echo 'sigue jenkins' && exit 0)"
                    sh "docker rm ${name_imagen_front} || (echo 'sigue jenkins' && exit 0)"
                    //eliminando imagen frontend
                    sh "docker rmi ${name_container}/${name_imagen_front} || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando contenedor backend
                    sh "docker stop ${name_imagen_back} || (echo 'sigue jenkins' && exit 0)"
                    sh "docker rm ${name_imagen_back} || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando imagen backend
                    sh "docker rmi ${name_container}/${name_imagen_back} || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando contenedor hawktest1
                    sh "docker stop hawktest1 || (echo 'sigue jenkins' && exit 0)"
                    sh "docker rm hawktest1 || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando imagen stackhank
                    sh "docker rmi stackhawk/hawkscan || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando contenedor hawktest2
                    sh "docker stop hawktest2 || (echo 'sigue jenkins' && exit 0)"
                    sh "docker rm hawktest2 || (echo 'sigue jenkins' && exit 0)"
                }

            }
        }/*
        stage ("Pull HawkScan Image") {
            steps {
                script{ //pull de la imagen docker stackhawk/hawkscan que es basicamente el scanner de stackhak
                    bat 'docker pull stackhawk/hawkscan:latest'
                }

            }
        }*/
        // Etapa para verificar que el repositorio existe y hay acceso por parte de jenkins a éste.
        stage('Verificar Frontend') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']],                       //Jenkins utiliza el plugin GitSCM e indica que se debe verificar la rama main
                          doGenerateSubmoduleConfigurations: false,                             //Evita generar configuraciones para submódulos.
                          extensions: [],                                                       //No se utilizan extensiones adicionales en esta configuración.
                          submoduleCfg: [],                                                     //No se proporciona configuración específica para submódulos.
                          userRemoteConfigs: [[credentialsId: 'TokenGitFelipe',                 //Se utiliza un ID de credencial llamado 'TokenGitFelipe' para la autenticación.
                          url: 'https://github.com/FelipeMoralesCyberTrust/PP-frontend.git']]]) //Se especifica la URL del repositorio Git
            }
        }
        stage('Analisis Frontend') {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner';                                                         //Se establece la ubicación del SonarQube Scanner en la variable scannerHome utilizando la herramienta registrada en Jenkins con el nombre 'sonar-scanner'.
                    withSonarQubeEnv('SonarCloud') {                                                                //Se utiliza el plugin withSonarQubeEnv para configurar el entorno de SonarQube llamado 'SonarCloud'.
                        withCredentials([string(credentialsId: 'SonarToJenkins', variable: 'SonarToJenkins')]) {    //Se utiliza el plugin withCredentials para proporcionar las credenciales necesarias para autenticarse con SonarQube.
                            sh "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.organization=felipemoralescybertrust \
                            -Dsonar.projectKey=FelipeMoralesCyberTrust_PP-frontend \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=https://sonarcloud.io \
                            -Dsonar.login=${SonarToJenkins}"
                        }                                                                                           //Se ejecuta el comando del SonarQube Scanner con los parámetros necesarios,
                                                                                                                    //incluyendo la organización, la clave del proyecto, la ubicación del código fuente,
                                                                                                                    //la URL de SonarCloud y la autenticación mediante el token almacenado en SonarToJenkins.
                    }
                }
            }
        }
        stage('Quality Gate Frontend') {
            steps {
                timeout(time: 1, unit: 'HOURS') {           //Estable que el QualityGate del scaneo de la estapa Analisis Repo 1 debe esperar a lo mucho 1 hora
                    waitForQualityGate abortPipeline: true  //Si el Quality Gate es aprobado, entonces se avanza a la siguiente etapa
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {    //Se crea la imagen docker utilizando el nombre creado en enviroment y el repositorio que debe copiar
                    sh """
                        docker build -t ${name_final_front} https://github.com/FelipeMoralesCyberTrust/PP-frontend.git
                    """
                }   //NOTA: si el repositorio que se quiere construir esta privado en github, se debe utilizar usuario y contraseña de la siguiente forma
                    //docker build -t ${name_final_front} https://${USUARIO}:${CONTRASENA}@github...(resto del repositorio)
                    // ${USUARIO} y ${CONTRASENA} son credenciales creadas en jenkins.
            }
        }
        stage ("HawkScan Test Frontend") {
            steps {
                withCredentials([string(credentialsId:'stackhawk-api-key', variable: 'hawk_api_key')]){ //Permite el uso seguro de credenciales almacenadas en Jenkins.
                    sh '''
                        docker run -v "${WORKSPACE}:/hawk:rw" -t \
                        -e "API_KEY=${hawk_api_key}" \
                        -e "NO_COLOR=true" \
                        --name hawktest1 \
                        stackhawk/hawkscan
                    '''
                }   //Inicia un contenedor Docker con la imagen de HawkScan
                    //Monta el directorio de trabajo de Jenkins en el directorio '/hawk' dentro del contenedor para analizar los archivos del proyecto.
            }       //Pasa la variable de entorno 'API_KEY' al contenedor con el valor de la clave API proporcionada por las credenciales.
                    //Configura HawkScan para no usar colores en la salida, lo cual es útil para entornos de Jenkins.
                    //Asigna un nombre al contenedor como 'hawktest1'.
        }
        stage("Snyk Test Frontend"){ 
            steps{ 
                script{ 
                    dir('/var/lib/jenkins/jobs/pipelineProyecto'){ // Cambio al directorio donde se encuentra el repositorio del proyecto
                        try{ // Inicio de un bloque try-catch para manejar errores
                            sh 'snyk auth "f3995448-4066-4d0e-8dc5-e20a69396bf6"' // Ejecuta el comando 'snyk auth' para autenticarse con Snyk
                            sh '''
                                snyk test --github "https://github.com/FelipeMoralesCyberTrust/PP-frontend.git" --json --debug --fail-on-issues=false > "snyk-results.json"
                            ''' // Ejecuta el comando 'snyk test' para realizar la prueba de seguridad en el código fuente del repositorio y guarda los resultados en un archivo JSON
                            if (sh(script: 'grep \'"severity": "critical"\'  snyk-results.json', returnStatus: true) == 0) { // Verifica si se encontraron vulnerabilidades críticas en los resultados de la prueba
                                echo "Se encontraron vulnerabilidades criticas. Deteniendo la ejecución." // Imprime un mensaje indicando que se encontraron vulnerabilidades críticas
                                error("Deteniendo la ejecución debido a vulnerabilidades criticas.") // Detiene la ejecución del pipeline debido a las vulnerabilidades críticas encontradas
                            } else {
                                echo "No se encontraron vulnerabilidades criticas." // Imprime un mensaje indicando que no se encontraron vulnerabilidades críticas
                            }
                        }catch(err){ // Manejo de excepciones en caso de error durante la ejecución del bloque try
                            echo "Un error esperado a ocurrido, seguir con jenkins." // Imprime un mensaje indicando que ocurrió un error esperado y que se debe continuar con Jenkins
                            if (sh(script: 'grep \'"severity": "critical"\' snyk-results.json', returnStatus: true) == 0) { // Verifica si se encontraron vulnerabilidades críticas en los resultados de la prueba
                                echo "Se encontraron vulnerabilidades criticas. Deteniendo la ejecución." // Imprime un mensaje indicando que se encontraron vulnerabilidades críticas
                                error("Deteniendo la ejecución debido a vulnerabilidades criticas.") // Detiene la ejecución del pipeline debido a las vulnerabilidades críticas encontradas
                            } else {
                                echo "No se encontraron vulnerabilidades criticas." // Imprime un mensaje indicando que no se encontraron vulnerabilidades críticas
                            }
                        }
                    }
                }
            }
        }
        
        stage('Verificar Backend') { 
            steps { 
                checkout([ // Utiliza el paso de "checkout" para obtener el código fuente del repositorio Git
                    $class: 'GitSCM', // Especifica el tipo de checkout como Git
                    branches: [[name: '*/main']], // Especifica la rama a verificar (en este caso, "main")
                    doGenerateSubmoduleConfigurations: false, // Indica que no se generarán configuraciones de submódulos
                    extensions: [], // No se especifican extensiones adicionales
                    submoduleCfg: [], // No se especifican configuraciones de submódulos
                    userRemoteConfigs: [[credentialsId: 'TokenGitFelipe', url: 'https://github.com/FelipeMoralesCyberTrust/PP-backend.git']] // Configura los detalles de acceso al repositorio remoto, incluyendo el ID de las credenciales y la URL del repositorio
                ])
            }
        }
        stage('Analisis Backend') { 
            steps { 
                script { 
                    def scannerHome = tool 'sonar-scanner'; // Definición de la variable 'scannerHome' que apunta a la ubicación de la herramienta 'sonar-scanner' en Jenkins
                    withSonarQubeEnv('SonarCloud') { // Configuración del entorno SonarQube, en este caso, para SonarCloud
                        withCredentials([string(credentialsId: 'SonarToJenkins', variable: 'SonarToJenkins')]) { // Utiliza las credenciales identificadas por el ID 'SonarToJenkins' y las almacena en la variable 'SonarToJenkins'
                            sh "${scannerHome}/bin/sonar-scanner \ 
                            -Dsonar.organization=felipemoralescybertrust \ 
                            -Dsonar.projectKey=FelipeMoralesCyberTrust_PP-backend \ 
                            -Dsonar.sources=. \ 
                            -Dsonar.host.url=https://sonarcloud.io \ 
                            -Dsonar.login=${SonarToJenkins}" 
                            
                        }// Ejecuta el comando sonar-scanner para realizar el análisis estático del código fuente
                            // Especifica la organización en SonarCloud
                            // Especifica la clave del proyecto en SonarCloud
                            // Especifica la ruta de las fuentes del proyecto a analizar
                            // Especifica la URL del servidor SonarCloud
                            // Utiliza la credencial para autenticarse en SonarCloud
                    }
                }
            }
        }


        stage('Quality Gate Backend') { 
            steps { 
                timeout(time: 1, unit: 'HOURS') { // Establece un límite de tiempo máximo para la espera del Quality Gate, en este caso, 1 hora
                    waitForQualityGate abortPipeline: true // Espera hasta que se cumpla el Quality Gate en SonarQube para el análisis estático del código del backend; si el Quality Gate no se cumple, aborta el pipeline
                }
            }
        }

        stage('Build Backend') { 
            steps { 
                script { 
                    sh """ 
                        docker build -t ${name_final_back} https://github.com/FelipeMoralesCyberTrust/PP-backend.git 
                    """
                }// Construye una imagen de Docker con el código fuente del repositorio especificado. El nombre de la imagen se define mediante la variable 'name_final_back'.
                // Ejecución de un comando shell de manera multi-línea
            }
        }

        stage("HawkScan Test Backend") { 
            steps { 
                withCredentials([string(credentialsId:'stackhawk-api-key', variable: 'hawk_api_key')]){ // Utiliza las credenciales identificadas por el ID 'stackhawk-api-key' y las almacena en la variable 'hawk_api_key'
                    sh ''' // Ejecución de un comando shell de manera multi-línea
                        docker run -v "${WORKSPACE}:/hawk:rw" -t \ 
                        -e "API_KEY=${hawk_api_key}" \ 
                        -e "NO_COLOR=true" \ 
                        --name hawktest2 \ 
                        stackhawk/hawkscan 
                    '''
                }// Ejecuta un contenedor Docker con la imagen stackhawk/hawkscan, montando el directorio de trabajo actual como '/hawk' dentro del contenedor
                // Define la variable de entorno 'API_KEY' dentro del contenedor con el valor almacenado en 'hawk_api_key'
                // Define la variable de entorno 'NO_COLOR' dentro del contenedor como 'true', lo que deshabilita la salida de color en la ejecución de HawkScan
                // Asigna un nombre al contenedor como 'hawktest2'
                // Especifica la imagen Docker a ejecutar, que contiene HawkScan para realizar las pruebas de seguridad
            }
        }
        stage("Snyk Test Backend"){ 
            steps{ 
                script{ 
                    dir('/var/lib/jenkins/jobs/pipelineProyecto'){ // Cambio al directorio donde se encuentra el repositorio del proyecto
                        try{ // Inicio de un bloque try-catch para manejar errores
                            sh 'snyk auth "f3995448-4066-4d0e-8dc5-e20a69396bf6"' // Ejecuta el comando 'snyk auth' para autenticarse con Snyk
                            sh '''
                                snyk test --github "https://github.com/FelipeMoralesCyberTrust/PP-backend.git" --json --debug --fail-on-issues=false > "snyk-results2.json"
                            ''' // Ejecuta el comando 'snyk test' para realizar la prueba de seguridad en el código fuente del repositorio y guarda los resultados en un archivo JSON
                            if (sh(script: 'grep \'"severity": "critical"\'  /var/lib/jenkins/jobs/pipelineProyecto/snyk-results2.json', returnStatus: true) == 0) { // Verifica si se encontraron vulnerabilidades críticas en los resultados de la prueba
                                echo "Se encontraron vulnerabilidades criticas. Deteniendo la ejecución." // Imprime un mensaje indicando que se encontraron vulnerabilidades críticas
                                error("Deteniendo la ejecución debido a vulnerabilidades criticas.") // Detiene la ejecución del pipeline debido a las vulnerabilidades críticas encontradas
                            } else {
                                echo "No se encontraron vulnerabilidades criticas." // Imprime un mensaje indicando que no se encontraron vulnerabilidades críticas
                            }
                        }catch(err){ // Manejo de excepciones en caso de error durante la ejecución del bloque try
                            echo "Un error esperado a ocurrido, seguir con jenkins." // Imprime un mensaje indicando que ocurrió un error esperado y que se debe continuar con Jenkins
                            if (sh(script: 'grep \'"severity": "critical"\' /var/lib/jenkins/jobs/pipelineProyecto/snyk-results2.json', returnStatus: true) == 0) { // Verifica si se encontraron vulnerabilidades críticas en los resultados de la prueba
                                echo "Se encontraron vulnerabilidades criticas. Deteniendo la ejecución." // Imprime un mensaje indicando que se encontraron vulnerabilidades críticas
                                error("Deteniendo la ejecución debido a vulnerabilidades criticas.") // Detiene la ejecución del pipeline debido a las vulnerabilidades críticas encontradas
                            } else {
                                echo "No se encontraron vulnerabilidades criticas." // Imprime un mensaje indicando que no se encontraron vulnerabilidades críticas
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    dir('/var/lib/jenkins/jobs/pipelineProyecto') {
                        sh 'docker-compose -f docker-compose.yml up -d'
                    }
                } //C:/ProgramData/Jenkins/.jenkins/workspace/pipelineProyecto
            }
        }
    }
}