pipeline {
    agent any

    parameters {
        string(name: 'name_container', defaultValue: 'felipemoralescybertrust', description: 'nombre del docker')
        string(name: 'name_imagen_front', defaultValue: 'practicafrontct', description: 'nombre de la imagen del front')
        string(name: 'tag_imagen', defaultValue: 'latest', description: 'etiqueta de la imagen')
        string(name: 'name_imagen_back', defaultValue: 'practicabackct',description: 'nombre de la imagen del back')
    }

    environment {
        name_final_front = "${name_container}/${name_imagen_front}:${tag_imagen}"
        name_final_back = "${name_container}/${name_imagen_back}:${tag_imagen}"
    }

    stages {
        //Etapa para eliminar contenedores e imagenes
        //Eliminar contenedores para que los cambios se generen en el despliegue
        //Eliminar imagenes para que no se creen duplicados.
        stage("Eliminar todos los contenedores"){
            steps{
                script{
                    //Eliminando contenedor frontend
                    sh "docker stop ${name_imagen_front} || (echo 'sigue jenkins' && exit 0)"
                    sh "docker rm ${name_imagen_front} || (echo 'sigue jenkins' && exit 0)"
                    //eliminando imagen frontend
                    sh "docker rmi ${name_container}/${name_imagen_front} || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando contenedor backend
                    sh "docker stop ${name_imagen_back} || (echo 'sigue jenkins' && exit 0)"
                    sh "docker rm ${name_imagen_back} || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando imagen backend
                    sh "docker rmi ${name_container}/${name_imagen_back} || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando contenedor hawktest1
                    sh "docker stop hawktest1 || (echo 'sigue jenkins' && exit 0)"
                    sh "docker rm hawktest1 || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando imagen stackhank
                    sh "docker rmi stackhawk/hawkscan || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando contenedor hawktest2
                    sh "docker stop hawktest2 || (echo 'sigue jenkins' && exit 0)"
                    sh "docker rm hawktest2 || (echo 'sigue jenkins' && exit 0)"
                }

            }
        }/*
        stage ("Pull HawkScan Image") {
            steps {
                script{ //pull de la imagen docker stackhawk/hawkscan que es basicamente el scanner de stackhak
                    bat 'docker pull stackhawk/hawkscan:latest'
                }

            }
        }*/
        // Etapa para verificar que el repositorio existe y hay acceso por parte de jenkins a éste.
        stage('Verificar Frontend') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']],                       //Jenkins utiliza el plugin GitSCM e indica que se debe verificar la rama main
                          doGenerateSubmoduleConfigurations: false,                             //Evita generar configuraciones para submódulos.
                          extensions: [],                                                       //No se utilizan extensiones adicionales en esta configuración.
                          submoduleCfg: [],                                                     //No se proporciona configuración específica para submódulos.
                          userRemoteConfigs: [[credentialsId: 'TokenGitFelipe',                 //Se utiliza un ID de credencial llamado 'TokenGitFelipe' para la autenticación.
                          url: 'https://github.com/FelipeMoralesCyberTrust/PP-frontend.git']]]) //Se especifica la URL del repositorio Git
            }
        }
        stage('Analisis Frontend') {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner';                                                         //Se establece la ubicación del SonarQube Scanner en la variable scannerHome utilizando la herramienta registrada en Jenkins con el nombre 'sonar-scanner'.
                    withSonarQubeEnv('SonarCloud') {                                                                //Se utiliza el plugin withSonarQubeEnv para configurar el entorno de SonarQube llamado 'SonarCloud'.
                        withCredentials([string(credentialsId: 'SonarToJenkins', variable: 'SonarToJenkins')]) {    //Se utiliza el plugin withCredentials para proporcionar las credenciales necesarias para autenticarse con SonarQube.
                            sh "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.organization=felipemoralescybertrust \
                            -Dsonar.projectKey=FelipeMoralesCyberTrust_PP-frontend \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=https://sonarcloud.io \
                            -Dsonar.login=${SonarToJenkins}"
                        }                                                                                           //Se ejecuta el comando del SonarQube Scanner con los parámetros necesarios,
                                                                                                                    //incluyendo la organización, la clave del proyecto, la ubicación del código fuente,
                                                                                                                    //la URL de SonarCloud y la autenticación mediante el token almacenado en SonarToJenkins.
                    }
                }
            }
        }
        stage('Quality Gate Frontend') {
            steps {
                timeout(time: 1, unit: 'HOURS') {           //Estable que el QualityGate del scaneo de la estapa Analisis Repo 1 debe esperar a lo mucho 1 hora
                    waitForQualityGate abortPipeline: true  //Si el Quality Gate es aprobado, entonces se avanza a la siguiente etapa
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {    //Se crea la imagen docker utilizando el nombre creado en enviroment y el repositorio que debe copiar
                    sh """
                        docker build -t ${name_final_front} https://github.com/FelipeMoralesCyberTrust/PP-frontend.git
                    """
                }   //NOTA: si el repositorio que se quiere construir esta privado en github, se debe utilizar usuario y contraseña de la siguiente forma
                    //docker build -t ${name_final_front} https://${USUARIO}:${CONTRASENA}@github...(resto del repositorio)
                    // ${USUARIO} y ${CONTRASENA} son credenciales creadas en jenkins.
            }
        }
        stage ("HawkScan Test Frontend") {
            steps {
                withCredentials([string(credentialsId:'stackhawk-api-key', variable: 'hawk_api_key')]){ //Permite el uso seguro de credenciales almacenadas en Jenkins.
                    sh '''
                        docker run -v "${WORKSPACE}:/hawk:rw" -t \
                        -e "API_KEY=${hawk_api_key}" \
                        -e "NO_COLOR=true" \
                        --name hawktest1 \
                        stackhawk/hawkscan
                    '''
                }   //Inicia un contenedor Docker con la imagen de HawkScan
                    //Monta el directorio de trabajo de Jenkins en el directorio '/hawk' dentro del contenedor para analizar los archivos del proyecto.
            }       //Pasa la variable de entorno 'API_KEY' al contenedor con el valor de la clave API proporcionada por las credenciales.
                    //Configura HawkScan para no usar colores en la salida, lo cual es útil para entornos de Jenkins.
                    //Asigna un nombre al contenedor como 'hawktest1'.
        }
        stage("Snyk Test Frontend"){
            steps{
                script{
                    dir('/var/lib/jenkins/jobs/pipelineProyecto'){ //
                        try{
                            sh 'snyk auth "f3995448-4066-4d0e-8dc5-e20a69396bf6"'
                            sh '''
                                snyk test --github "https://github.com/FelipeMoralesCyberTrust/PP-frontend.git" --json --debug --fail-on-issues=false > "snyk-results.json"
                            '''
                            if (sh(script: 'grep \'"severity": "critical"\'  snyk-results.json', returnStatus: true) == 0) {
                                echo "Se encontraron vulnerabilidades criticas. Deteniendo la ejecución."
                                error("Deteniendo la ejecución debido a vulnerabilidades criticas.")
                            } else {
                                echo "No se encontraron vulnerabilidades criticas."
                            }
                        }catch(err){
                            echo "Un error esperado a ocurrido, seguir con jenkins."
                            if (sh(script: 'grep \'"severity": "critical"\' snyk-results.json', returnStatus: true) == 0) {
                                echo "Se encontraron vulnerabilidades criticas. Deteniendo la ejecución."
                                error("Deteniendo la ejecución debido a vulnerabilidades criticas.")
                            } else {
                                    echo "No se encontraron vulnerabilidades criticas."
                            }
                        }
                    }
                }
            }
        }
        
        stage('Verificar Backend') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], 
                          doGenerateSubmoduleConfigurations: false, 
                          extensions: [], 
                          submoduleCfg: [], 
                          userRemoteConfigs: [[credentialsId: 'TokenGitFelipe', url: 'https://github.com/FelipeMoralesCyberTrust/PP-backend.git']]])
            }
        }
        stage('Analisis Backend') {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner';
                    withSonarQubeEnv('SonarCloud') {
                        withCredentials([string(credentialsId: 'SonarToJenkins', variable: 'SonarToJenkins')]) {
                            sh "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.organization=felipemoralescybertrust \
                            -Dsonar.projectKey=FelipeMoralesCyberTrust_PP-backend \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=https://sonarcloud.io \
                            -Dsonar.login=${SonarToJenkins}"
                        }
                    }
                }
            }
        }

        stage('Quality Gate Backend') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Backend') {
            steps {
                script {
                    sh """
                        docker build -t ${name_final_back} https://github.com/FelipeMoralesCyberTrust/PP-backend.git
                    """
                }
            }
        }
        stage ("HawkScan Test Backend") {
            steps {
                //echo "Directorio de trabajo actual: ${WORKSPACE}"
                withCredentials([string(credentialsId:'stackhawk-api-key', variable: 'hawk_api_key')]){
                    sh '''
                        docker run -v "${WORKSPACE}:/hawk:rw" -t \
                        -e "API_KEY=${hawk_api_key}" \
                        -e "NO_COLOR=true" \
                        --name hawktest2 \
                        stackhawk/hawkscan
                    '''
                }
            }
        }
        stage("Snyk Test Backend"){
            steps{
                script{
                    dir('/var/lib/jenkins/jobs/pipelineProyecto'){
                        try{
                            sh 'snyk auth "f3995448-4066-4d0e-8dc5-e20a69396bf6"'
                            sh '''
                                snyk test --github "https://github.com/FelipeMoralesCyberTrust/PP-backend.git" --json --debug --fail-on-issues=false > "snyk-results2.json"
                            '''
                            if (sh(script: 'grep \'"severity": "critical"\'  /var/lib/jenkins/jobs/pipelineProyecto/snyk-results2.json', returnStatus: true) == 0) {
                                echo "Se encontraron vulnerabilidades criticas. Deteniendo la ejecución."
                                error("Deteniendo la ejecución debido a vulnerabilidades criticas.")
                            } else {
                                echo "No se encontraron vulnerabilidades criticas."
                            }
                        }catch(err){
                            echo "Un error esperado a ocurrido, seguir con jenkins."
                            if (sh(script: 'grep \'"severity": "critical"\' /var/lib/jenkins/jobs/pipelineProyecto/snyk-results2.json', returnStatus: true) == 0) {
                                echo "Se encontraron vulnerabilidades criticas. Deteniendo la ejecución."
                                echo "Avanzando jenkins apesar de la vunerabilidad."
                                //error("Deteniendo la ejecución debido a vulnerabilidades criticas.")
                            } else {
                                    echo "No se encontraron vulnerabilidades criticas."
                            }
                        }
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    dir('/var/lib/jenkins/jobs/pipelineProyecto') {
                        sh 'docker-compose -f docker-compose.yml up -d'
                    }
                } //C:/ProgramData/Jenkins/.jenkins/workspace/pipelineProyecto
            }
        }
    }
}