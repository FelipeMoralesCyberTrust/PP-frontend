pipeline {
    agent any

    parameters {
        string(name: 'name_container', defaultValue: 'felipemoralescybertrust', description: 'nombre del docker')
        string(name: 'name_imagen_front', defaultValue: 'practicafrontct', description: 'nombre de la imagen del front')
        string(name: 'tag_imagen', defaultValue: 'latest', description: 'etiqueta de la imagen')
        string(name: 'name_imagen_back', defaultValue: 'practicabackct',description: 'nombre de la imagen del back')
    }

    environment {
        name_final_front = "${name_container}/${name_imagen_front}:${tag_imagen}"
        name_final_back = "${name_container}/${name_imagen_back}:${tag_imagen}"
    }
    stages {
        stage("Eliminar todos los contenedores"){
            steps{
                script{
                    //Eliminando contenedor frontend
                    bat "docker stop ${name_imagen_front} || (echo 'sigue jenkins' && exit 0)"
                    bat "docker rm ${name_imagen_front} || (echo 'sigue jenkins' && exit 0)"
                    //eliminando imagen frontend
                    bat "docker rmi ${name_container}/${name_imagen_front} || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando contenedor backend
                    bat "docker stop ${name_imagen_back} || (echo 'sigue jenkins' && exit 0)"
                    bat "docker rm ${name_imagen_back} || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando imagen backend
                    bat "docker rmi ${name_container}/${name_imagen_back} || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando contenedor hawktest1
                    bat "docker stop hawktest1 || (echo 'sigue jenkins' && exit 0)"
                    bat "docker rm hawktest1 || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando imagen stackhank
                    bat "docker rmi stackhawk/hawkscan || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando contenedor hawktest2
                    bat "docker stop hawktest2 || (echo 'sigue jenkins' && exit 0)"
                    bat "docker rm hawktest2 || (echo 'sigue jenkins' && exit 0)"
                }

            }
        }
        
        stage ("Pull HawkScan Image") {
            steps {
                script{
                    bat 'docker pull stackhawk/hawkscan:latest'
                }

            }
        }

        stage('Verificar Frontend') {
            steps {
                script{
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], 
                        doGenerateSubmoduleConfigurations: false, 
                        extensions: [], 
                        submoduleCfg: [], 
                        userRemoteConfigs: [[credentialsId: 'TokenGitFelipe', url: 'https://github.com/FelipeAMorales/practicaFrontend.git']]])
                }
            }
        }
        
        stage('Analisis Frontend') {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner';
                    withSonarQubeEnv('SonarCloud') {
                        withCredentials([string(credentialsId: 'SonarToJenkins', variable: 'SonarToJenkins')]) {
                            bat "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.organization=felipeamorales \
                            -Dsonar.projectKey=FelipeAMorales_practicaFrontend \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=https://sonarcloud.io \
                            -Dsonar.token=${SonarToJenkins}"
                        }
                    }
                }
            }
        }
        
        stage('Quality Gate Frontend') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {
                    bat """
                        docker build -t ${name_final_front} https://github.com/FelipeAMorales/practicaFrontend.git
                    """
                }
            }
        }
        stage("HawkScan Test Frontend") {
            steps {
                script {
                    bat "rmdir /s /q 'C:/ProgramData/Jenkins/.jenkins/workspace/practicaFrontend'"
                    def repositoryPath = "C:/ProgramData/Jenkins/.jenkins/workspace/practicaFrontend"

                    echo "Clonando el repositorio desde GitHub"
                    bat "git clone https://github.com/FelipeAMorales/practicaFrontend.git ${repositoryPath}"

                    echo "Ejecutando HawkScan"
                    withCredentials([string(credentialsId: 'stackhawk-api-key', variable: 'hawk_api_key')]) {
                        bat """docker run -v ${repositoryPath}:/hawk:rw -t \
                            -e API_KEY=${hawk_api_key} \
                            -e NO_COLOR=true \
                            --name hawktest2 \
                            stackhawk/hawkscan"""
                    }
                }
            }
        }
        
        
        stage("Snyk Test Frontend"){
            steps{
                script{
                    dir('C:/ProgramData/Jenkins/.jenkins/workspace/pipelineproyecto'){
                        try{
                            bat 'snyk auth "caa4fdc9-1de6-4095-b7e2-0eee0cb668b8"'
                            bat '''
                                snyk test --github "https://github.com/FelipeAMorales/practicaFrontend.git" --json --debug --fail-on-issues=false > "snyk-results.json"
                            '''
                            def result = readFile(file: 'C:/ProgramData/Jenkins/.jenkins/workspace/pipelineproyecto/snyk-results.json').trim()
                            if (result.contains('"severity": "critical"')) {
                                echo "Se encontraron vulnerabilidades criticas. Deteniendo la ejecuci贸n."
                                error("Deteniendo la ejecuci贸n debido a vulnerabilidades criticas.")
                            } else {
                                echo "No se encontraron vulnerabilidades criticas."
                            }
                        } catch(err){
                            echo "Un error esperado a ocurrido, seguir con jenkins."
                            def result = readFile(file: 'snyk-results.json').trim()
                            if (result.contains('"severity": "critical"')) {
                                echo "Se encontraron vulnerabilidades criticas. Deteniendo la ejecuci贸n."
                                error("Deteniendo la ejecuci贸n debido a vulnerabilidades criticas.")
                            } else {
                                echo "No se encontraron vulnerabilidades criticas."
                            }
                        }
                    }
                }
            }
        }
        stage('Verificar Backend') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], 
                          doGenerateSubmoduleConfigurations: false, 
                          extensions: [], 
                          submoduleCfg: [], 
                          userRemoteConfigs: [[credentialsId: 'TokenGitFelipe', url: 'https://github.com/FelipeAMorales/practicaBackend.git']]])
            }
        }
        
        stage('Analisis Backend') {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner';
                    withSonarQubeEnv('SonarCloud') {
                        withCredentials([string(credentialsId: 'SonarToJenkins', variable: 'SonarToJenkins')]) {
                            bat "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.organization=felipeamorales \
                            -Dsonar.projectKey=FelipeAMorales_practicaBackend \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=https://sonarcloud.io \
                            -Dsonar.token=${SonarToJenkins}"
                        }
                    }
                }
            }
        }

        stage('Quality Gate Backend') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        

        stage('Build Backend') {
            steps {
                script {
                    bat """
                        docker build -t ${name_final_back} https://github.com/FelipeAMorales/practicaBackend.git
                    """
                }
            }
        }
        
        stage ("HawkScan Test Backend") {
            steps {
                echo "Directorio de trabajo actual: ${WORKSPACE}"
                withCredentials([string(credentialsId:'stackhawk-api-key', variable: 'hawk_api_key')]){
                    bat """docker run -v ${WORKSPACE}:/hawk:rw -t \
                        -e API_KEY=${hawk_api_key} \
                        -e NO_COLOR=true \
                        --name hawktest2 \
                        stackhawk/hawkscan"""
                }
            }
        }
        stage("Snyk Test Backend"){
            steps{
                script{
                    dir('C:/ProgramData/Jenkins/.jenkins/workspace/pipelineproyecto'){
                        try{
                            bat 'snyk auth "caa4fdc9-1de6-4095-b7e2-0eee0cb668b8"'
                            bat '''
                                snyk test --github "https://github.com/FelipeAMorales/practicaBackend.git" --json --debug --fail-on-issues=false > "snyk-results2.json"
                            '''
                            def result = readFile(file: 'C:/ProgramData/Jenkins/.jenkins/workspace/pipelineproyecto/snyk-results2.json').trim()
                            if (result.contains('"severity": "critical"')) {
                                echo "Se encontraron vulnerabilidades criticas. Deteniendo la ejecuci贸n."
                                error("Deteniendo la ejecuci贸n debido a vulnerabilidades criticas.")
                            } else {
                                echo "No se encontraron vulnerabilidades criticas."
                            }
                        } catch(err){
                            echo "Un error esperado a ocurrido, seguir con jenkins."
                            def result = readFile(file: 'C:/ProgramData/Jenkins/.jenkins/workspace/pipelineproyecto/snyk-results2.json').trim()
                            if (result.contains('"severity": "critical"')) {
                                echo "Se encontraron vulnerabilidades criticas. Deteniendo la ejecuci贸n."
                                error("Deteniendo la ejecuci贸n debido a vulnerabilidades criticas.")
                            } else {
                                echo "No se encontraron vulnerabilidades criticas."
                            }
                        }
                    }
                }
            }
        }
        
        stage('Despliegue de Aplicacion') {
            steps {
                script {
                    dir('C:/ProgramData/Jenkins/.jenkins/workspace/pipelineproyecto') {
                        bat 'docker-compose -f docker-compose.yml up -d'
                    }
                }
            }
        }
    }
}